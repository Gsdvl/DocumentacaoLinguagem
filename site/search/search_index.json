{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"1. Introdu\u00e7\u00e3o: Vis\u00e3o Geral do Projeto","text":"<p>Este documento detalha o projeto e a implementa\u00e7\u00e3o de uma nova linguagem de programa\u00e7\u00e3o imperativa, desenvolvida para a disciplina DIM0548 - Engenharia de Linguagens da Universidade Federal do Rio Grande do Norte. O principal objetivo do projeto \u00e9 conceber e implementar uma linguagem de programa\u00e7\u00e3o, com foco particular na \u00e1rea de Ci\u00eancia de Dados e Aprendizado de M\u00e1quina.</p> <p>A linguagem foi projetada para ter uma sintaxe clara e expressiva, visando a legibilidade do c\u00f3digo. Ela oferecer\u00e1 suporte a tipagem din\u00e2mica ou est\u00e1tica opcional, provendo flexibilidade e seguran\u00e7a. Um aspecto crucial \u00e9 o suporte a tipos de dados abstratos, como dataframes e tensores, com sobrecarga de operadores para manipula\u00e7\u00e3o eficiente, o que \u00e9 essencial para o dom\u00ednio de aplica\u00e7\u00e3o.</p> <p>O sistema de implementa\u00e7\u00e3o ideal para a linguagem proposta \u00e9 a interpreta\u00e7\u00e3o, dada a import\u00e2ncia da execu\u00e7\u00e3o interativa para o desenvolvimento e experimenta\u00e7\u00e3o em Ci\u00eancia de Dados e Aprendizado de M\u00e1quina. Essa abordagem permite a explora\u00e7\u00e3o r\u00e1pida de dados e o desenvolvimento de modelos sem a necessidade de recompilar a cada modifica\u00e7\u00e3o, acelerando o processo de prototipagem e ajustes.</p> <p>A linguagem busca ser um h\u00edbrido, herdando caracter\u00edsticas de linguagens como C e GoLang, mantendo um prop\u00f3sito semelhante ao LISP, e se posicionando pr\u00f3xima ao Python na \u00e1rvore geneal\u00f3gica das linguagens de programa\u00e7\u00e3o. A inspira\u00e7\u00e3o do Python se reflete na sintaxe limpa e expressiva, al\u00e9m do suporte \u00e0 tipagem est\u00e1tica opcional para controle de desempenho e seguran\u00e7a. O projeto visa equilibrar facilidade de uso e expressividade com a efici\u00eancia e robustez computacional de linguagens compiladas, tornando-a atrativa tanto para cientistas de dados quanto para desenvolvedores que necessitam de alto desempenho.</p> <p>O projeto aborda as fases principais de um compilador, incluindo a an\u00e1lise l\u00e9xica e a an\u00e1lise sint\u00e1tica, com a constru\u00e7\u00e3o de um analisador sint\u00e1tico bottom-up (LALR). A linguagem tamb\u00e9m define suas vincula\u00e7\u00f5es e sistema de tipos, com foco em tipagem est\u00e1tica e forte.</p>"},{"location":"ast/","title":"AST","text":"<p>Documenta\u00e7\u00e3o da AST</p>"},{"location":"ast/#estrutura-da-ast-astc","title":"Estrutura da AST (<code>ast.c</code>)","text":"<p>Este m\u00f3dulo implementa as fun\u00e7\u00f5es de constru\u00e7\u00e3o e gerenciamento da \u00c1rvore de Sintaxe Abstrata (AST) da linguagem.  Ele \u00e9 respons\u00e1vel por representar a estrutura l\u00f3gica do c\u00f3digo-fonte ap\u00f3s a an\u00e1lise sint\u00e1tica, permitindo que fases posteriores como an\u00e1lise sem\u00e2ntica e interpreta\u00e7\u00e3o/execu\u00e7\u00e3o sejam realizadas.</p>"},{"location":"ast/#estrutura-geral","title":"Estrutura Geral","text":"<ul> <li>Arquivo: <code>ast.c</code></li> <li>Cabealhos: <code>#include \"ast.h\"</code></li> <li>Uso de mem\u00f3ria: Todas as aloca\u00e7\u00f5es so feitas via <code>malloc</code>, <code>realloc</code>, <code>strdup</code>, e liberadas com <code>free</code>.</li> <li>Origem da linha: Cada n da AST marcado com a varivel global <code>yylineno</code> (linha atual do lexer/parser).</li> </ul>"},{"location":"ast/#criacao-de-nos-da-ast","title":"Cria\u00e7\u00e3o de N\u00f3s da AST","text":"<p>Todos os n\u00f3s s\u00e3o derivados de <code>AstNode</code> e criados com uma fun\u00e7\u00e3o base: static AstNode* create_base_node(AstNodeType type, size_t size); Ela aloca memoria, atribui o tipo do n\u00f3 e o n\u00famero da linha.</p>"},{"location":"ast/#tipos-de-nos-literais","title":"Tipos de N\u00f3s Literais","text":"Fun\u00e7\u00e3o Tipo de N\u00f3 Descri\u00e7\u00e3o <code>create_int_literal_node(int)</code> <code>NODE_TYPE_INT_LITERAL</code> Representa um n\u00famero inteiro. <code>create_float_literal_node(float)</code> <code>NODE_TYPE_FLOAT_LITERAL</code> Representa um n\u00famero de ponto flutuante. <code>create_string_literal_node(char*)</code> <code>NODE_TYPE_STRING_LITERAL</code> Representa uma string. <code>create_identifier_node(char*)</code> <code>NODE_TYPE_IDENTIFIER</code> Representa um identificador (nome)."},{"location":"ast/#expressoes","title":"Express\u00f5es","text":"Fun\u00e7\u00e3o Tipo de N\u00f3 Descri\u00e7\u00e3o <code>create_assignment_node(target, op, expr)</code> <code>NODE_TYPE_ASSIGNMENT</code> Atribui\u00e7\u00e3o com operador (ex: <code>+=</code>). <code>create_binary_op_node(left, op, right)</code> <code>NODE_TYPE_BINARY_OP</code> Opera\u00e7\u00e3o bin\u00e1ria (<code>+</code>, <code>-</code>, etc). <code>create_unary_op_node(op, operand)</code> <code>NODE_TYPE_UNARY_OP</code> Opera\u00e7\u00e3o un\u00e1ria (<code>!</code>, <code>-</code>, etc). <code>create_expression_statement_node(expr)</code> <code>NODE_TYPE_EXPRESSION_STATEMENT</code> Express\u00e3o isolada como instru\u00e7\u00e3o."},{"location":"ast/#blocos-e-controle-de-fluxo","title":"Blocos e Controle de Fluxo","text":"Fun\u00e7\u00e3o Tipo de N\u00f3 Descri\u00e7\u00e3o <code>create_block_node(statements)</code> <code>NODE_TYPE_BLOCK</code> Bloco de m\u00faltiplas instru\u00e7\u00f5es. <code>create_if_statement_node(cond, then, else)</code> <code>NODE_TYPE_IF_STATEMENT</code> Condicional <code>if</code>/<code>else</code>. <code>create_while_node(cond, body)</code> <code>NODE_TYPE_WHILE_LOOP</code> La\u00e7o <code>while</code>. <code>create_for_node(init, cond, incr, body)</code> <code>NODE_TYPE_FOR_LOOP</code> La\u00e7o <code>for</code>. <code>create_break_statement_node()</code> <code>NODE_TYPE_BREAK_STATEMENT</code> Interrup\u00e7\u00e3o de la\u00e7o. <code>create_return_statement_node(expr)</code> <code>NODE_TYPE_RETURN_STATEMENT</code> Retorno de fun\u00e7\u00e3o."},{"location":"ast/#entrada-e-saida","title":"Entrada e Sa\u00edda","text":"Fun\u00e7\u00e3o Tipo de N\u00f3 Descri\u00e7\u00e3o <code>create_printf_node(fmt_str, args)</code> <code>NODE_TYPE_PRINTF_STATEMENT</code> Comando <code>printf</code> com m\u00faltiplos argumentos. <code>create_printf_id_node(id)</code> <code>NODE_TYPE_PRINTF_ID</code> Impress\u00e3o direta de uma vari\u00e1vel. <code>create_input_node()</code> <code>NODE_TYPE_INPUT</code> Comando de entrada <code>input</code>."},{"location":"ast/#arrays","title":"Arrays","text":"Fun\u00e7\u00e3o Tipo de N\u00f3 Descri\u00e7\u00e3o <code>create_array_literal_node(elements)</code> <code>NODE_TYPE_ARRAY_LITERAL</code> Cria\u00e7\u00e3o de vetor com valores literais. <code>create_array_access_node(array, index_expr)</code> <code>NODE_TYPE_ARRAY_ACCESS</code> Acesso a elemento do vetor. <code>create_array_assignment_node(array_access, expr)</code> <code>NODE_TYPE_ASSIGNMENT</code> Atribui\u00e7\u00e3o de valor a um \u00edndice do vetor."},{"location":"ast/#funcoes","title":"Fun\u00e7\u00f5es","text":"Fun\u00e7\u00e3o Tipo de N\u00f3 Descri\u00e7\u00e3o <code>create_function_declaration_node(name, body)</code> <code>NODE_TYPE_FUNCTION_DECL</code> Declara\u00e7\u00e3o de uma fun\u00e7\u00e3o. <code>create_function_call_node(name, args)</code> <code>NODE_TYPE_FUNCTION_CALL</code> Chamada de fun\u00e7\u00e3o."},{"location":"ast/#estruturas-de-suporte","title":"Estruturas de Suporte","text":""},{"location":"ast/#astnodelist","title":"<code>AstNodeList</code>","text":"<p>Representa uma lista dinmica de n\u00f3s da AST (como blocos de instrues ou arrays). - <code>create_ast_node_list_from_node(node)</code> - <code>append_to_ast_node_list(list, node)</code></p>"},{"location":"ast/#argumentnode","title":"<code>ArgumentNode</code>","text":"<p>Representa uma lista encadeada de argumentos de fun\u00e7\u00e3o ou <code>printf</code>. - <code>create_argument_node(node)</code> - <code>free_argument_list(list)</code></p>"},{"location":"ast/#liberacao-de-memoria","title":"Libera\u00e7\u00e3o de Mem\u00f3ria","text":"<p>A fun\u00e7\u00e3o <code>free_ast(node)</code> percorre toda a \u00e1rvore de forma recursiva e libera a mem\u00f3ria alocada por: - Strings duplicadas (<code>strdup</code>) - Subn\u00f3s e listas - Argumentos Ela identifica o tipo de n\u00f3 via <code>node-&gt;type</code> e aplica a libera\u00e7\u00e3o correta para cada caso. Tamb\u00e9m imprime um erro padr\u00e3o caso o tipo seja desconhecido. - A AST \u00e9 projetada para preservar informao de linha, \u00fatil para erros e debug.</p>"},{"location":"execution/","title":"Execu\u00e7\u00e3o","text":"<ol> <li>Instru\u00e7\u00f5es de Uso do Compilador</li> </ol>"},{"location":"execution/#comandos-make-disponiveis","title":"Comandos Make Dispon\u00edveis","text":"<p>Voc\u00ea pode usar os seguintes comandos com make:</p> Comando O que faz make ou make all Compila todo o projeto e gera bin/g2dl_interpreter make clean Remove todos os arquivos gerados, incluindo build/, bin/ e tempor\u00e1rios make debug N\u00e3o implementado (mas pode ser usado para recompilar com -g) make help Exibe instru\u00e7\u00f5es de uso dos comandos do Makefile <p>Para gerar e utilizar o compilador G2DL, siga os passos abaixo: Passo 1: Gerar o Compilador Para compilar o c\u00f3digo-fonte da linguagem e gerar o execut\u00e1vel do compilador, navegue at\u00e9 o diret\u00f3rio raiz do projeto no seu terminal e execute o comando make: Bash $ make</p> <p>Esse comando executa os seguintes passos automaticamente:</p> <ul> <li>Gera o analisador l\u00e9xico com Flex</li> <li>Gera o analisador sint\u00e1tico com Bison</li> <li>Compila todos os arquivos .c</li> <li>Organiza os .o em build/</li> <li>Cria o execut\u00e1vel final em bin/g2dl_interpreter</li> </ul> <p>Passo 2: Executar o Compilador Ap\u00f3s a compila\u00e7\u00e3o, o execut\u00e1vel do compilador ser\u00e1 gerado. Voc\u00ea pode utiliz\u00e1-lo para processar um arquivo de c\u00f3digo-fonte da linguagem G2DL. Por exemplo, para compilar o arquivo input.txt, utilize o seguinte comando: Bash $ ./compiler_g2dl input.txt</p> <p>Certifique-se de substituir input.txt pelo nome do arquivo de c\u00f3digo-fonte que deseja compilar. Passo Extra: Limpar o Compilador Para remover os arquivos gerados durante o processo de compila\u00e7\u00e3o (como os arquivos objeto e o execut\u00e1vel do compilador), voc\u00ea pode usar o comando make clean: Bash $ make clean</p>"},{"location":"lexer/","title":"Palavras Reservadas da Linguagem G2DL","text":"<p>Palavras reservadas s\u00e3o identificadores especiais que n\u00e3o podem ser usados como nomes de vari\u00e1veis, fun\u00e7\u00f5es ou objetos, pois possuem um significado fixo na linguagem. Elas fazem parte da gram\u00e1tica principal e s\u00e3o reconhecidas diretamente pelo analisador l\u00e9xico.</p> <p>Abaixo est\u00e1 a lista completa das palavras reservadas da linguagem G2DL, junto com uma descri\u00e7\u00e3o do papel de cada uma.</p>"},{"location":"lexer/#controle-de-fluxo","title":"Controle de Fluxo","text":"Palavra Fun\u00e7\u00e3o <code>if</code> Inicia uma estrutura condicional. Executa um bloco se a condi\u00e7\u00e3o for verdadeira. <code>else</code> Bloco alternativo executado se a condi\u00e7\u00e3o do <code>if</code> for falsa. <code>while</code> La\u00e7o que executa um bloco enquanto a condi\u00e7\u00e3o for verdadeira. <code>for</code> Estrutura de repeti\u00e7\u00e3o com inicializa\u00e7\u00e3o, condi\u00e7\u00e3o e incremento definidos. <code>break</code> Interrompe imediatamente a execu\u00e7\u00e3o do la\u00e7o atual (<code>for</code> ou <code>while</code>)."},{"location":"lexer/#funcoes-e-retornos","title":"Fun\u00e7\u00f5es e Retornos","text":"Palavra Fun\u00e7\u00e3o <code>function</code> Define uma fun\u00e7\u00e3o com nome, par\u00e2metros e corpo. <code>return</code> Encerra a fun\u00e7\u00e3o e opcionalmente retorna um valor. <p>Em G2DL, fun\u00e7\u00f5es seguem um modelo de execu\u00e7\u00e3o baseado em pilha, semelhante ao da linguagem C. Cada vez que uma fun\u00e7\u00e3o \u00e9 chamada, um novo frame \u00e9 empilhado na stack de execu\u00e7\u00e3o contendo os argumentos passados, vari\u00e1veis locais e o endere\u00e7o de retorno. Esse frame \u00e9 descartado assim que a fun\u00e7\u00e3o termina, seja por meio de um return ou ao chegar ao final do bloco. Por isso, todas as vari\u00e1veis declaradas dentro de uma fun\u00e7\u00e3o possuem tempo de vida limitado \u00e0 dura\u00e7\u00e3o da chamada, sendo recriadas em chamadas futuras.  O valor de retorno \u00e9 passado por valor, e a linguagem permite chamadas recursivas, j\u00e1 que cada inst\u00e2ncia da fun\u00e7\u00e3o mant\u00e9m seu pr\u00f3prio ambiente isolado na pilha. Caso n\u00e3o haja uma condi\u00e7\u00e3o de parada adequada, a recurs\u00e3o pode levar ao estouro da pilha.  A \u00fanica diferen\u00e7a pr\u00e1tica em rela\u00e7\u00e3o a C \u00e9 a presen\u00e7a obrigat\u00f3ria da palavra-chave function para declarar fun\u00e7\u00f5es.</p>"},{"location":"lexer/#valores-literais","title":"Valores Literais","text":"Palavra Fun\u00e7\u00e3o <code>true</code> Valor booleano verdadeiro. <code>false</code> Valor booleano falso."},{"location":"lexer/#entrada-e-saida","title":"Entrada e Sa\u00edda","text":"Palavra Fun\u00e7\u00e3o <code>printf</code> Fun\u00e7\u00e3o nativa para exibir dados no terminal (semelhante \u00e0 <code>printf</code> em C). <code>input</code> L\u00ea uma entrada do usu\u00e1rio e retorna uma string."},{"location":"lexer/#tipos-de-dados","title":"Tipos de Dados","text":"Palavra Fun\u00e7\u00e3o <code>int</code> Declara\u00e7\u00e3o de vari\u00e1vel do tipo inteiro. <code>float</code> Declara\u00e7\u00e3o de vari\u00e1vel do tipo ponto flutuante. <code>string</code> Declara\u00e7\u00e3o de vari\u00e1vel textual (cadeia de caracteres)."},{"location":"lexer/#operadores-aritmeticos-e-de-atribuicao-por-ordem-de-precedencia","title":"Operadores Aritm\u00e9ticos e de Atribui\u00e7\u00e3o (por ordem de preced\u00eancia)","text":"Operador Fun\u00e7\u00e3o Tipo Preced\u00eancia <code>**</code> Exponencia\u00e7\u00e3o Aritm\u00e9tico Alta <code>*</code> Multiplica\u00e7\u00e3o Aritm\u00e9tico Alta <code>/</code> Divis\u00e3o Aritm\u00e9tico Alta <code>%</code> M\u00f3dulo (resto da divis\u00e3o inteira) Aritm\u00e9tico Alta <code>+</code> Soma Aritm\u00e9tico M\u00e9dia <code>-</code> Subtra\u00e7\u00e3o Aritm\u00e9tico M\u00e9dia <code>=</code> Atribui\u00e7\u00e3o Atribui\u00e7\u00e3o Baixa <code>+=</code> Atribui\u00e7\u00e3o com soma Atribui\u00e7\u00e3o composta Baixa <code>-=</code> Atribui\u00e7\u00e3o com subtra\u00e7\u00e3o Atribui\u00e7\u00e3o composta Baixa <code>*=</code> Atribui\u00e7\u00e3o com multiplica\u00e7\u00e3o Atribui\u00e7\u00e3o composta Baixa <code>/=</code> Atribui\u00e7\u00e3o com divis\u00e3o Atribui\u00e7\u00e3o composta Baixa <code>%=</code> Atribui\u00e7\u00e3o com m\u00f3dulo Atribui\u00e7\u00e3o composta Baixa <code>**=</code> Atribui\u00e7\u00e3o com exponencia\u00e7\u00e3o Atribui\u00e7\u00e3o composta Baixa"},{"location":"lexer/#operadores-relacionais-e-logicos","title":"Operadores Relacionais e L\u00f3gicos","text":"Operador Fun\u00e7\u00e3o <code>==</code> Igualdade <code>!=</code> Diferen\u00e7a <code>&lt;</code> Menor que <code>&gt;</code> Maior que <code>&lt;=</code> Menor ou igual <code>&gt;=</code> Maior ou igual <code>&amp;&amp;</code> E l\u00f3gico (AND) <code>||</code> Ou l\u00f3gico (OR) <code>!</code> Nega\u00e7\u00e3o l\u00f3gica (NOT)"},{"location":"lexer/#simbolos-e-delimitadores","title":"S\u00edmbolos e Delimitadores","text":"S\u00edmbolo Fun\u00e7\u00e3o <code>(</code> <code>)</code> Delimitam argumentos de fun\u00e7\u00f5es ou preced\u00eancia <code>{</code> <code>}</code> Delimitam blocos de c\u00f3digo <code>[</code> <code>]</code> Delimitam listas, vetores ou \u00edndices <code>,</code> Separador de argumentos ou elementos <code>:</code> Pode ser usado em declara\u00e7\u00f5es ou blocos <code>;</code> Finaliza comandos"},{"location":"lexer/#literais-e-identificadores","title":"Literais e Identificadores","text":"Tipo Exemplo Token retornado Inteiros <code>42</code> <code>INTEGER</code> Ponto flutuante <code>3.14</code> <code>FLOAT_LITERAL</code> String (aspas) <code>\"texto\"</code> <code>STRING_LITERAL</code> String (aspas simples) <code>'texto'</code> <code>STRING_LITERAL</code> Identificador <code>minhaVariavel</code> <code>ID</code>"},{"location":"lexer/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>Todas essas palavras s\u00e3o reconhecidas diretamente pelo lexer e n\u00e3o exigem nenhuma declara\u00e7\u00e3o pr\u00e9via.</li> <li>Elas n\u00e3o podem ser sobrescritas (por exemplo, n\u00e3o \u00e9 poss\u00edvel criar uma fun\u00e7\u00e3o chamada <code>if</code>).</li> <li>S\u00e3o case-sensitive (sens\u00edveis a mai\u00fasculas/min\u00fasculas). Portanto, <code>If</code> ou <code>ELSE</code> n\u00e3o s\u00e3o v\u00e1lidas.</li> </ul>"},{"location":"lexer/#exemplo-de-uso","title":"Exemplo de uso","text":"<pre><code>function somar(a, b) {\n    if (a &gt; b) {\n        printf(\"a \u00e9 maior\");\n    } else {\n        printf(\"b \u00e9 maior ou igual\");\n    }\n    return a + b;\n}\n</code></pre>"},{"location":"lexer/#diagrama-de-fluxo-do-lexer","title":"Diagrama de fluxo do Lexer","text":"<pre><code>Entrada de c\u00f3digo-fonte\n        |\n        v\n+------------------------+\n|  Ignorar espa\u00e7os, \\n  |\n|  tabs e coment\u00e1rios   |\n+------------------------+\n        |\n        v\n+--------------------------+\n| \u00c9 palavra reservada?     |\n| (if, else, for, etc.)    |\n+--------------------------+\n        | Sim\n        v\nRetorna TOKEN correspondente (ex: IF)\n        |\n        No\n        v\n+---------------------------+\n| \u00c9 operador/s\u00edmbolo fixo?  |\n| (+, ==, {, }, etc.)       |\n+---------------------------+\n        | Sim\n        v\nRetorna TOKEN correspondente (ex: PLUS, ASSIGNMENT)\n        |\n        No\n        v\n+-----------------------------+\n| \u00c9 literal num\u00e9rico?         |\n| (ex: 42, 3.14)              |\n+-----------------------------+\n        | Sim\n        v\nConverte e retorna INTEGER ou FLOAT_LITERAL\n        |\n        No\n        v\n+-----------------------------+\n| \u00c9 literal string?           |\n| (ex: \"texto\", 'txt')        |\n+-----------------------------+\n        | Sim\n        v\nExtrai valor e retorna STRING_LITERAL\n        |\n        No\n        v\n+-------------------------------+\n| \u00c9 identificador (ID)?         |\n| ([a-zA-Z_][a-zA-Z0-9_]*)      |\n+-------------------------------+\n        | Sim\n        v\nRetorna ID com string associada\n        |\n        No\n        v\n+-----------------------------+\n| \u00c9 coment\u00e1rio?               |\n| (// ou /* */)               |\n+-----------------------------+\n        | Sim\n        v\nIgnora e continua\n        |\n        No\n        v\n+-----------------------------+\n| Token inv\u00e1lido?             |\n+-----------------------------+\n        | Sim\n        v\nImprime erro com `yytext`\n</code></pre>"},{"location":"lexer/#tabela-completa-de-tokens-do-lexer","title":"Tabela Completa de Tokens do Lexer","text":"Token Representa\u00e7\u00e3o Literal (Lexema) Categoria <code>IF</code> <code>if</code> Palavra reservada <code>ELSE</code> <code>else</code> Palavra reservada <code>WHILE</code> <code>while</code> Palavra reservada <code>FOR</code> <code>for</code> Palavra reservada <code>FUNCTION</code> <code>function</code> Palavra reservada <code>RETURN</code> <code>return</code> Palavra reservada <code>BREAK</code> <code>break</code> Palavra reservada <code>TRUE</code> <code>true</code> Literal booleano <code>FALSE</code> <code>false</code> Literal booleano <code>PRINTF</code> <code>printf</code> Fun\u00e7\u00e3o embutida (I/O) <code>INPUT</code> <code>input</code> Fun\u00e7\u00e3o embutida (I/O) <code>PLUS_ASSIGNMENT</code> <code>+=</code> Operador de atribui\u00e7\u00e3o <code>MINUS_ASSIGNMENT</code> <code>-=</code> Operador de atribui\u00e7\u00e3o <code>MULTIPLY_ASSIGNMENT</code> <code>*=</code> Operador de atribui\u00e7\u00e3o <code>DIVIDE_ASSIGNMENT</code> <code>/=</code> Operador de atribui\u00e7\u00e3o <code>MOD_ASSIGNMENT</code> <code>%=</code> Operador de atribui\u00e7\u00e3o <code>POWER_ASSIGNMENT</code> <code>**=</code> Operador de atribui\u00e7\u00e3o <code>EQUAL</code> <code>==</code> Operador relacional <code>NOT_EQUAL</code> <code>!=</code> Operador relacional <code>LESS_THAN_OR_EQUAL</code> <code>&lt;=</code> Operador relacional <code>GREATER_THAN_OR_EQUAL</code> <code>&gt;=</code> Operador relacional <code>ASSIGNMENT</code> <code>=</code> Operador de atribui\u00e7\u00e3o <code>LESS_THAN</code> <code>&lt;</code> Operador relacional <code>GREATER_THAN</code> <code>&gt;</code> Operador relacional <code>PLUS</code> <code>+</code> Operador aritm\u00e9tico <code>MINUS</code> <code>-</code> Operador aritm\u00e9tico <code>MULTIPLY</code> <code>*</code> Operador aritm\u00e9tico <code>DIVIDE</code> <code>/</code> Operador aritm\u00e9tico <code>MOD</code> <code>%</code> Operador aritm\u00e9tico <code>POWER</code> <code>**</code> Operador aritm\u00e9tico <code>AND</code> <code>&amp;&amp;</code> Operador l\u00f3gico <code>OR</code> <code>||</code> Operador l\u00f3gico <code>NOT</code> <code>!</code> Operador l\u00f3gico <code>LEFT_SQUARE_BRACKET</code> <code>[</code> S\u00edmbolo <code>RIGHT_SQUARE_BRACKET</code> <code>]</code> S\u00edmbolo <code>LEFT_PARENTHESIS</code> <code>(</code> S\u00edmbolo <code>RIGHT_PARENTHESIS</code> <code>)</code> S\u00edmbolo <code>LEFT_CURLY_BRACKET</code> <code>{</code> S\u00edmbolo <code>RIGHT_CURLY_BRACKET</code> <code>}</code> S\u00edmbolo <code>COMMA</code> <code>,</code> S\u00edmbolo <code>COLON</code> <code>:</code> S\u00edmbolo <code>';'</code> (char literal) <code>;</code> S\u00edmbolo <code>INT</code> <code>int</code> Tipo de dado <code>FLOAT</code> <code>float</code> Tipo de dado <code>STRING</code> <code>string</code> Tipo de dado <code>INTEGER</code> Ex: <code>42</code> Literal num\u00e9rico <code>FLOAT_LITERAL</code> Ex: <code>3.14</code> Literal num\u00e9rico <code>STRING_LITERAL</code> Ex: <code>\"texto\"</code> ou <code>'texto'</code> Literal textual <code>ID</code> Ex: <code>variavel1</code>, <code>x</code>, <code>soma</code> Identificador"}]}